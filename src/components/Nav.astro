---
import ContactCTA from "../components/ContactCTA.astro";
const textLinks: { label: string; href: string }[] = [
  { label: "About me", href: "#about" },
  { label: "References", href: "#references" },
  { label: "Stack", href: "#stack" },
  { label: "Contact", href: "#contact" },
];
---

<nav
  id="header"
  class="nav fixed top-0 z-[9999] font-nunito font-medium w-full px-6 md:px-12 lg:px-24 2xl:px-52 py-8 transition-all duration-500 ease-in-out bg-transparent"
>
  <div class="flex justify-between items-center">
    <a
      href="/"
      class="font-semibold text-2xl text-purple-300 drop-shadow-[0_4px_6px_rgba(0,0,0,0.1)] flex items-center transform hover:scale-110"
    >
      <span
        class="ml-2 bg-gradient-to-r from-purple-300 to-pink-400 bg-clip-text text-transparent"
      >
        jhromadka.dev
      </span>
    </a>

    <ul class="hidden md:flex items-center gap-8 font-rethink">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              href={href}
              class="text-gray-300 hover:text-purple-300 transition-all"
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>

    <button
      id="menu-button"
      class="md:hidden text-white text-2xl relative w-8 h-8 flex items-center justify-center"
      aria-label="Toggle menu"
    >
      <div
        id="menu-icon"
        class="menu-icon w-full h-[2px] bg-white transition-all duration-300 relative"
      >
      </div>
    </button>
  </div>
</nav>

<div
  id="menu-overlay"
  class="fixed inset-0 bg-black bg-opacity-90 z-[9998] flex items-center justify-center hidden transition-opacity duration-500"
>
  <ul
    class="flex flex-col items-center gap-8 text-white text-lg font-rethink uppercase"
  >
    {
      textLinks.map(({ label, href }) => (
        <li>
          <a
            href={href}
            class="hover:text-purple-300 transition-all"
            onclick="document.getElementById('menu-overlay').classList.add('hidden');"
          >
            {label}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<script>
if (typeof window !== "undefined") {
  document.addEventListener("DOMContentLoaded", () => {
    const menuButton = document.getElementById("menu-button");
    const menuOverlay = document.getElementById("menu-overlay");
    const menuIcon = document.getElementById("menu-icon");
    const header = document.getElementById("header");

    const handleScroll = () => {
      if (window.scrollY === 0) {
        header?.classList.remove("scrolled");
      } else {
        header?.classList.add("scrolled");
      }
    };

    handleScroll();
    window.addEventListener("scroll", handleScroll);

    menuButton?.addEventListener("click", () => {
      const isVisible = menuOverlay?.classList.contains("hidden");
      if (isVisible) {
        menuOverlay?.classList.remove("hidden");
        if (menuOverlay?.style) {
          menuOverlay.style.opacity = "1";
        }
        menuIcon?.classList.add("open");
      } else {
        menuOverlay?.classList.add("hidden");
        if (menuOverlay?.style) {
          menuOverlay.style.opacity = "0";
        }
        menuIcon?.classList.remove("open");
      }
    });

    menuOverlay?.addEventListener("click", (e) => {
      if (e.target === menuOverlay) {
        menuOverlay.classList.add("hidden");
        menuOverlay.style.opacity = "0";
        menuIcon?.classList.remove("open");
      }
    });

    const adjustScroll = (event: any) => {
      const headerHeight = header?.offsetHeight || 0;
      const targetId = event.target.getAttribute("href")?.substring(1);
      if (targetId) {
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          event.preventDefault();
          const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({
            top: targetPosition - (headerHeight + 50),
            behavior: "smooth",
          });
        }
      }
    };
    document.querySelectorAll('a[href^="#"]').forEach((link) => {
      link.addEventListener("click", adjustScroll);
    });
  });
}

</script>

<style>
  .nav {
    position: fixed;
    top: 0;
    z-index: 9999;
    width: 100%;
    transition: all 0.5s ease-in-out;
    background-color: transparent;
  }

  .nav.scrolled {
    background: rgba(13, 18, 35, 0.875);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .menu-icon {
    background-color: white;
    height: 2px;
    transform-origin: center;
  }

  .menu-icon::before,
  .menu-icon::after {
    content: "";
    position: absolute;
    background-color: white;
    height: 2px;
    width: 100%;
    transition:
      transform 0.3s,
      top 0.3s,
      bottom 0.3s;
  }

  .menu-icon::before {
    top: -8px;
  }

  .menu-icon::after {
    bottom: -8px;
  }

  .menu-icon.open {
    background-color: transparent;
  }

  .menu-icon.open::before {
    top: 0;
    transform: rotate(45deg);
  }

  .menu-icon.open::after {
    bottom: 0;
    transform: rotate(-45deg);
  }

  #menu-overlay {
    display: flex;
    opacity: 0;
    pointer-events: none;
  }

  #menu-overlay:not(.hidden) {
    pointer-events: auto;
  }

  #menu-overlay.hidden {
    display: none;
  }
</style>
