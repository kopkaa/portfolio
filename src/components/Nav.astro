---
import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import type { iconPaths } from './IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: 'Home', href: '/' },
	{ label: 'Work', href: '/work/' },
	{ label: 'About', href: '/about/' },
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
	{ label: 'Twitter', href: 'https://twitter.com/me', icon: 'twitter-logo' },
	{ label: 'Twitch', href: 'https://twitch.tv/me', icon: 'twitch-logo' },
	{ label: 'GitHub', href: 'https://github.com/me', icon: 'github-logo' },
	{ label: 'CodePen', href: 'https://codepen.io/me', icon: 'codepen-logo' },
	{ label: 'dribbble', href: 'https://dribbble.com/me', icon: 'dribbble-logo' },
	{ label: 'YouTube', href: 'https://www.youtube.com/@me/', icon: 'youtube-logo' },
];
---

<nav class="relative z-[9999] font-nunito font-medium mb-14 px-12 md:px-20 py-10">
	<div class="flex justify-between gap-2">
		<a href="/" class="font-semibold text-2xl text-purple-300 drop-shadow-[0_4px_6px_rgba(0,0,0,0.1)] flex items-center  transform hover:scale-110">
			<Icon icon="terminal-window" color="var(--accent-regular)" size="1.6em" gradient />
			<span class="ml-2 bg-gradient-to-r from-purple-300 to-pink-400 bg-clip-text text-transparent">
				jhromadka.dev
			</span>
		</a>
	</div>
	<noscript>
		<ul class="flex flex-col gap-4 text-base leading-6 list-none p-8 bg-gray-800 border-b border-gray-700">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'inline-block text-gray-300 no-underline',
								{
									'text-gray-0': Astro.url.pathname === href || (href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
	</noscript>
	<noscript>
		<div class="p-6">
			<div class="flex flex-wrap gap-2 text-xl">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="p-2 text-accent-dark no-underline transition-colors hover:text-accent-text-over">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>
		</div>
	</noscript>
	<div id="menu-content" hidden>
		<ul class="flex flex-col gap-4 text-base leading-6 list-none p-8 bg-gray-800 border-b border-gray-700">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'inline-block text-gray-300 no-underline',
								{
									'text-gray-0': Astro.url.pathname === href || (href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
		<div class="p-6">
			<div class="flex flex-wrap gap-2 text-xl">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="p-2 text-accent-dark no-underline transition-colors hover:text-accent-text-over">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>

			<div class="flex items-center h-[calc(var(--text-xl)_+_1rem)]">
				<ThemeToggle />
			</div>
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add('menu-content');

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);
</script>
