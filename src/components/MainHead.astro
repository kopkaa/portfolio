---
import "../styles/global.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const {
  title = "Jan Hromádka - Web Developer",
  description = "Personal portfolio",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="author" content="Jan Hromádka" />
<meta name="description" property="og:description" content={description} />
<meta property="og:image" content="/assets/homepage.jpg" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/png" href="/icon.png" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

<!-- Preload critical font styles -->

<link
  rel="preload"
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Nunito:400,700&display=swap"
  crossorigin
  as="font"
/>
<link
  rel="preload"
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Rethink+Sans:ital,wght@0,400..800;1,400..800&display=swap"
  crossorigin
  as="font"
/>

<link
  rel="preload"
  href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
  as="style"
  onload="this.onload=null;this.rel='stylesheet'"
/>
<noscript>
  <link
    href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
    rel="stylesheet"
  />
</noscript>
<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  const getThemePreference = () => {
    return "dark";
    // if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
    //   return localStorage.getItem('theme');
    // }
    // return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

  if (typeof localStorage !== "undefined") {
    // Watch the document element and persist user preference when it changes.
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("theme-dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
